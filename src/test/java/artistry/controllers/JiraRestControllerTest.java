/** This class was generated by GenTest@Mobacar */
package artistry.controllers;

import artistry.models.*;
import artistry.services.JiraService;
import artistry.services.RapidviewService;
import java.io.IOException;
import java.nio.charset.*;
import java.util.*;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.io.*;
import org.json.*;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Description;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.bind.annotation.*;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import utils.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = JiraRestController.class)
public class JiraRestControllerTest {

	@Autowired
	private JiraRestController underTest;

	@MockBean
	private JiraService jira;

	@MockBean
	private RapidviewService rapidview;

	private MockMvc mockMvc;

	@Before
	public void setupTest() {
		// prepare test
		this.mockMvc = MockMvcBuilders.standaloneSetup(underTest).build();
	}


	@Test
	public void testNewWebhook_MVC_post() throws Exception {
		// given
		JiraWebhook hook = new JiraWebhook();
		// when
		MvcResult actual = mockMvc.perform(post("/jira/createwebhook")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(JsonUtils.objectToJSON(hook, true))
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testDeleteWebhook_MVC_delete() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(delete("/jira/deletewebhook/{id}")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetAll_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getall")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetAllWebhooks_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getallwebhooks")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetByTeamId_MVC_get() throws Exception {
		// given
		int teamid = 0;
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getbyteamid?teamid="+teamid)
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetIssueTypes_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getissuetypes")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetProjects_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getprojects")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetBacklogByTeamId_MVC_get() throws Exception {
		// given
		int teamid = 0;
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getteambacklog?teamid="+teamid)
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetEpicsByTeamId_MVC_get() throws Exception {
		// given
		int teamid = 0;
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getteamepics?teamid="+teamid)
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetIssuesWithoutEpicsByTeamId_MVC_get() throws Exception {
		// given
		int teamid = 0;
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getteamissueswithoutepic?teamid="+teamid)
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetUserByUsername_MVC_get() throws Exception {
		// given
		String username = "username";
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getuserbyusername?username="+username)
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testQueryWebhookById_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/jira/getwebhook/{id}")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testUpdateWebhookById_MVC_put() throws Exception {
		// given
		JiraWebhook hook = new JiraWebhook();
		// when
		MvcResult actual = mockMvc.perform(put("/jira/updatewebhook/{id}")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testDeleteWebhook() throws Exception {
		// given
		int id = 0;
		// when
		String actual = underTest.deleteWebhook(id);
		// then
		assertEquals("", actual);
	}

	@Test
	public void testGetAll() throws Exception {
		// given
		// when
		RapidView actual = underTest.getAll();
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetAllWebhooks() throws Exception {
		// given
		// when
		String actual = underTest.getAllWebhooks();
		// then
		assertEquals("", actual);
	}

	@Test
	public void testGetBacklogByTeamId() throws Exception {
		// given
		int teamid = 0;
		// when
		JiraBacklog actual = underTest.getBacklogByTeamId(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetByTeamId() throws Exception {
		// given
		int teamid = 0;
		// when
		BoardEntry actual = underTest.getByTeamId(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetEpicsByTeamId() throws Exception {
		// given
		int teamid = 0;
		// when
		JiraEpics actual = underTest.getEpicsByTeamId(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetIssueTypes() throws Exception {
		// given
		// when
		List<IssueType> actual = underTest.getIssueTypes();
		// then
		assertArrayEquals(new Object[]{}, actual.toArray());
	}

	@Test
	public void testGetIssuesWithoutEpicsByTeamId() throws Exception {
		// given
		int teamid = 0;
		// when
		JiraIssuesWithoutEpic actual = underTest.getIssuesWithoutEpicsByTeamId(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetProjects() throws Exception {
		// given
		// when
		JiraProjects actual = underTest.getProjects();
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetUserByUsername() throws Exception {
		// given
		String username = "username";
		// when
		JiraUser actual = underTest.getUserByUsername(username);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testNewWebhook() throws Exception {
		// given
		JiraWebhook hook = new JiraWebhook();
		// when
		String actual = underTest.newWebhook(hook);
		// then
		assertEquals("", actual);
	}

	@Test
	public void testQueryWebhookById() throws Exception {
		// given
		int id = 0;
		// when
		String actual = underTest.queryWebhookById(id);
		// then
		assertEquals("", actual);
	}

	@Test
	public void testUpdateWebhookById() throws Exception {
		// given
		int id = 0;
		JiraWebhook hook = new JiraWebhook();
		// when
		String actual = underTest.updateWebhookById(id, hook);
		// then
		assertEquals("", actual);
	}

}
