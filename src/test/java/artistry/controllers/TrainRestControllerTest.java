/** This class was generated by GenTest@Mobacar */
package artistry.controllers;

import artistry.models.Train;
import artistry.repositories.TrainRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.junit.Assert.assertNotNull;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = TrainRestController.class)
public class TrainRestControllerTest {

	@Autowired
	private TrainRestController underTest;

	@MockBean
	private TrainRepository repo;

	private MockMvc mockMvc;

	@Before
	public void setupTest() {
		// prepare test
		this.mockMvc = MockMvcBuilders.standaloneSetup(underTest).build();
	}


	@Test
	public void testCreateTrain_MVC_post() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(post("/train/create")
				.accept("application/json"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testDeleteTrain_MVC_delete() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(delete("/train/delete")
				.accept("application/json"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testGetAllTrains_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/train/getall")
				.accept("application/json"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testUpdateTrain_MVC_post() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(post("/train/update")
				.accept("application/json"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testCreateTrain() throws Exception {
		// given
		Train train = new Train();
		// when
		Train actual = underTest.createTrain(train);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testDeleteTrain() throws Exception {
		// given
		Train train = new Train();
		// when
		Train actual = underTest.deleteTrain(train);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetAllTrains() throws Exception {
		// given
		// when
		Iterable<Train> actual = underTest.getAllTrains();
		// then
		assertNotNull(actual);
	}

	@Test
	public void testUpdateTrain() throws Exception {
		// given
		Train train = new Train();
		// when
		Train actual = underTest.updateTrain(train);
		// then
		assertNotNull(actual);
	}

}
