/** This class was generated by GenTest@Mobacar */
package artistry.controllers;

import artistry.models.Destination;
import artistry.models.WebHookMessage;
import artistry.repositories.DestinationRepository;
import artistry.repositories.MessageRepository;
import artistry.webhook.MessageReceivedEvent;
import java.nio.charset.*;
import java.util.*;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.io.*;
import org.json.*;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Description;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.bind.annotation.*;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import utils.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = OutgoingWebHookRestController.class)
public class OutgoingWebHookRestControllerTest {

	@Autowired
	private OutgoingWebHookRestController underTest;

	@MockBean
	private DestinationRepository destinationRepository;

	@MockBean
	private MessageRepository messageRepository;

	private MockMvc mockMvc;

	@Before
	public void setupTest() {
		// prepare test
		this.mockMvc = MockMvcBuilders.standaloneSetup(underTest).build();
	}


	@Test
	public void testListDestinations_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = mockMvc.perform(get("/webhook/destinations")
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testRegisterNewDestination_MVC_post() throws Exception {
		// given
		String url = "url";
		// when
		MvcResult actual = mockMvc.perform(post("/webhook/destinations")
				.param("url", url)
				.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk())
				.andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
	}

	@Test
	public void testPostMessageToDestination_MVC_post() throws Exception {
		// given
		String body = "body";
		// when
		mockMvc.perform(post("/webhook/destinations/{id}/message")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(JsonUtils.objectToJSON(body, true))
)
				.andExpect(status().isOk())
				;
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testDeleteDestination() throws Exception {
		// given
		Long id = 0L;
		// when
		underTest.deleteDestination(id);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testListDestinations() throws Exception {
		// given
		// when
		Iterable<Destination> actual = underTest.listDestinations();
		// then
		assertNotNull(actual);
	}

	@Test
	public void testPostMessageToDestination() throws Exception {
		// given
		Long id = 0L;
		String body = "body";
		String contentType = "contentType";
		// when
		underTest.postMessageToDestination(id, body, contentType);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testRegisterNewDestination() throws Exception {
		// given
		String url = "url";
		// when
		Long actual = underTest.registerNewDestination(url);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testSetApplicationEventPublisher() throws Exception {
		// given
		ApplicationEventPublisher applicationEventPublisher = mock(ApplicationEventPublisher.class);
		// when
		underTest.setApplicationEventPublisher(applicationEventPublisher);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

}
