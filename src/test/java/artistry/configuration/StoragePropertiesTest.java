/** This class was generated by GenTest@Mobacar */
package artistry.configuration;

import artistry.utils.StorageService;
import com.fasterxml.classmate.TypeResolver;
import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisher;
import java.io.File;
import java.nio.charset.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.io.*;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = StorageProperties.class)
public class StoragePropertiesTest {

	@Autowired
	private StorageProperties underTest;
	

	@Value("${artistry.data.directory}")
	private String location;

	@Before
	public void setupTest() {
		// prepare test
	}

	@Test
	public void testInit() throws Exception {
		// given
		StorageService storageService = mock(StorageService.class);
		// when
		CommandLineRunner actual = underTest.init(storageService);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testSetLocation() throws Exception {
		// given
		String location = "location";
		// when
		underTest.setLocation(location);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testGetLocation() throws Exception {
		// given
		// when
		String actual = StorageProperties.getLocation();
		// then
		assertEquals("", actual);
	}

}
