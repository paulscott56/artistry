/** This class was generated by GenTest@Mobacar */
package artistry.services;

import artistry.repositories.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.multipart.MultipartFile;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = ArtistryCsvReader.class)
public class ArtistryCsvReaderTest {

	@Autowired
	private ArtistryCsvReader underTest;

	@MockBean
	private MajorCityRepository cityRepo;

	@MockBean
	private ContinentRepository continentRepo;

	@MockBean
	private CountryRepository countryRepo;

	@MockBean
	private GeoRepository geoRepo;

	@MockBean
	private PlanetRepository planetRepo;

	@MockBean
	private RolesRepository rolesRepo;

	@Before
	public void setupTest() {
		// prepare test
	}

	@Test
	public void testCreatePlanetEarth() throws Exception {
		// given
		// when
		underTest.createPlanetEarth();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testImportPeople() throws Exception {
		// given
		MultipartFile file = new MockMultipartFile("fileName", "content".getBytes());
		// when
		underTest.importPeople(file);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testReadAllCountriesCsv() throws Exception {
		// given
		// when
		underTest.readAllCountriesCsv();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testReadCity() throws Exception {
		// given
		String file = "file";
		// when
		underTest.readCity(file);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testReadCountryByCode() throws Exception {
		// given
		String code = "code";
		// when
		underTest.readCountryByCode(code);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testReadCountryInfoCsv() throws Exception {
		// given
		// when
		underTest.readCountryInfoCsv();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testReadRolesCsv() throws Exception {
		// given
		// when
		underTest.readRolesCsv();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

}
