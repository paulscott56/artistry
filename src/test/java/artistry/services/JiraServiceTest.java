/** This class was generated by GenTest@Mobacar */
package artistry.services;

import artistry.models.*;
import artistry.repositories.*;
import artistry.utils.JiraUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;

import java.util.List;

import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = JiraService.class)
public class JiraServiceTest {

	@Autowired
	private JiraService underTest;

	@Value("${jira.url}")
	private String jiraUrl;

	@MockBean
	private JiraBacklogRepository blrepo;

	@MockBean
	private BoardRepository brepo;

	@MockBean
	private IssueTypeRepository issueTypeRepo;

	@MockBean
	private JiraIssuesWithoutEpicRepository issuesWoEpicRepo;

	@MockBean
	private JiraUserRepository jiraUserRepo;

	@MockBean
	private JiraProjectsRepository projectsRepo;

	@MockBean
	private RestTemplate rt;

	@MockBean
	private JiraUtils utils;

	@Before
	public void setupTest() {
		// prepare test
	}

	@Test
	public void testCreateBoard() throws Exception {
		// given
		// when
		underTest.createBoard();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testCreateWebhook() throws Exception {
		// given
		JiraWebhook hook = new JiraWebhook();
		// when
		String actual = underTest.createWebhook(hook);
		// then
		assertEquals("", actual);
	}

	@Test
	public void testDeleteWebhook() throws Exception {
		// given
		int id = 0;
		// when
		String actual = underTest.deleteWebhook(id);
		// then
		assertEquals("", actual);
	}

	@Test
	public void testGetAllWebhooks() throws Exception {
		// given
		// when
		String actual = underTest.getAllWebhooks();
		// then
		assertEquals("", actual);
	}

	@Test
	public void testGetBacklog() throws Exception {
		// given
		int teamid = 0;
		// when
		JiraBacklog actual = underTest.getBacklog(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetBoard() throws Exception {
		// given
		int teamid = 0;
		// when
		BoardEntry actual = underTest.getBoard(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetIssueTypes() throws Exception {
		// given
		// when
		List<IssueType> actual = underTest.getIssueTypes();
		// then
		assertArrayEquals(new Object[]{}, actual.toArray());
	}

	@Test
	public void testGetProjects() throws Exception {
		// given
		// when
		JiraProjects actual = underTest.getProjects();
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetTeamEpics() throws Exception {
		// given
		int teamid = 0;
		// when
		JiraEpics actual = underTest.getTeamEpics(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetTeamIssuesWithoutEpics() throws Exception {
		// given
		int teamid = 0;
		// when
		JiraIssuesWithoutEpic actual = underTest.getTeamIssuesWithoutEpics(teamid);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetUserByUsername() throws Exception {
		// given
		String username = "username";
		// when
		JiraUser actual = underTest.getUserByUsername(username);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testGetWebhookById() throws Exception {
		// given
		int id = 0;
		// when
		String actual = underTest.getWebhookById(id);
		// then
		assertEquals("", actual);
	}

	@Test
	public void testUpdateWebhookById() throws Exception {
		// given
		int id = 0;
		JiraWebhook hook = new JiraWebhook();
		// when
		String actual = underTest.updateWebhookById(id, hook);
		// then
		assertEquals("", actual);
	}

}
