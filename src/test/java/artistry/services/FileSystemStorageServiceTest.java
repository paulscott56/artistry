/** This class was generated by GenTest@Mobacar */
package artistry.services;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.Resource;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Path;
import java.util.stream.Stream;

import static org.junit.Assert.assertNotNull;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = FileSystemStorageService.class)
public class FileSystemStorageServiceTest {

	@Autowired
	private FileSystemStorageService underTest;

	@Before
	public void setupTest() {
		// prepare test
	}

	@Test
	public void testDeleteAll() throws Exception {
		// given
		// when
		underTest.deleteAll();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testInit() throws Exception {
		// given
		// when
		underTest.init();
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

	@Test
	public void testLoad() throws Exception {
		// given
		String filename = "filename";
		// when
		Path actual = underTest.load(filename);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testLoadAll() throws Exception {
		// given
		// when
		Stream<Path> actual = underTest.loadAll();
		// then
		assertNotNull(actual);
	}

	@Test
	public void testLoadAsResource() throws Exception {
		// given
		String filename = "filename";
		// when
		Resource actual = underTest.loadAsResource(filename);
		// then
		assertNotNull(actual);
	}

	@Test
	public void testStore() throws Exception {
		// given
		MultipartFile file = new MockMultipartFile("fileName", "content".getBytes());
		// when
		underTest.store(file);
		// then
		// TODO add meaningful assert or verify(mock).method();
	}

}
