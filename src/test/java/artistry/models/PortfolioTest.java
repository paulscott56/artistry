/** This class was generated by GenTest@Mobacar */
package artistry.models;

import java.util.*;
import java.util.Arrays;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class PortfolioTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Portfolio underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetBusinessEpics() throws Exception {
		// given
		Set<Epic> value = new TreeSet<>();
		underTest.setBusinessEpics(value);
		// when
		Set<Epic> actual = underTest.getBusinessEpics();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetEnablerEpics() throws Exception {
		// given
		Set<Epic> value = new TreeSet<>();
		underTest.setEnablerEpics(value);
		// when
		Set<Epic> actual = underTest.getEnablerEpics();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetEnterpriseArchitect() throws Exception {
		// given
		Person value = new Person();
		underTest.setEnterpriseArchitect(value);
		// when
		Person actual = underTest.getEnterpriseArchitect();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEpicOwners() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setEpicOwners(value);
		// when
		Set<Person> actual = underTest.getEpicOwners();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetLargeSolutions() throws Exception {
		// given
		Set<LargeSolution> value = new TreeSet<>();
		underTest.setLargeSolutions(value);
		// when
		Set<LargeSolution> actual = underTest.getLargeSolutions();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetLeanBudget() throws Exception {
		// given
		Document value = new Document();
		underTest.setLeanBudget(value);
		// when
		Document actual = underTest.getLeanBudget();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPortfolioBacklog() throws Exception {
		// given
		Set<Feature> value = new TreeSet<>();
		underTest.setPortfolioBacklog(value);
		// when
		Set<Feature> actual = underTest.getPortfolioBacklog();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetPortfolioCanvas() throws Exception {
		// given
		PortfolioCanvas value = new PortfolioCanvas();
		underTest.setPortfolioCanvas(value);
		// when
		PortfolioCanvas actual = underTest.getPortfolioCanvas();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPortfolioManagementTeam() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setPortfolioManagementTeam(value);
		// when
		Set<Person> actual = underTest.getPortfolioManagementTeam();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetPortfolioName() throws Exception {
		// given
		String value = "portfolioName";
		underTest.setPortfolioName(value);
		// when
		String actual = underTest.getPortfolioName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPrograms() throws Exception {
		// given
		Set<Program> value = new TreeSet<>();
		underTest.setPrograms(value);
		// when
		Set<Program> actual = underTest.getPrograms();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetStrategicThemes() throws Exception {
		// given
		Set<StrategicTheme> value = new TreeSet<>();
		underTest.setStrategicThemes(value);
		// when
		Set<StrategicTheme> actual = underTest.getStrategicThemes();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetValueStreams() throws Exception {
		// given
		Set<ValueStream> value = new TreeSet<>();
		underTest.setValueStreams(value);
		// when
		Set<ValueStream> actual = underTest.getValueStreams();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

}
