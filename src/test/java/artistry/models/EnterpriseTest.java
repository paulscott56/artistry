/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Set;
import java.util.TreeSet;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class EnterpriseTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Enterprise underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetEnterpriseName() throws Exception {
		// given
		String value = "enterpriseName";
		underTest.setEnterpriseName(value);
		// when
		String actual = underTest.getEnterpriseName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetGuardRails() throws Exception {
		// given
		GuardRails value = new GuardRails();
		underTest.setGuardRails(value);
		// when
		GuardRails actual = underTest.getGuardRails();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetKeyPersonnel() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setKeyPersonnel(value);
		// when
		Set<Person> actual = underTest.getKeyPersonnel();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetKpis() throws Exception {
		// given
		Set<KPI> value = new TreeSet<>();
		underTest.setKpis(value);
		// when
		Set<KPI> actual = underTest.getKpis();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetPortfolioBudget() throws Exception {
		// given
		PortfolioBudget value = new PortfolioBudget();
		underTest.setPortfolioBudget(value);
		// when
		PortfolioBudget actual = underTest.getPortfolioBudget();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPortfolios() throws Exception {
		// given
		Set<Portfolio> value = new TreeSet<>();
		underTest.setPortfolios(value);
		// when
		Set<Portfolio> actual = underTest.getPortfolios();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetQualitativeData() throws Exception {
		// given
		Set<Document> value = new TreeSet<>();
		underTest.setQualitativeData(value);
		// when
		Set<Document> actual = underTest.getQualitativeData();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetStrategicThemes() throws Exception {
		// given
		Set<StrategicTheme> value = new TreeSet<>();
		underTest.setStrategicThemes(value);
		// when
		Set<StrategicTheme> actual = underTest.getStrategicThemes();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

}
