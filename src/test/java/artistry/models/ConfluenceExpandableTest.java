/** This class was generated by GenTest@Mobacar */
package artistry.models;

import java.util.*;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class ConfluenceExpandableTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private ConfluenceExpandable underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetDescription() throws Exception {
		// given
		String value = "description";
		underTest.setDescription(value);
		// when
		String actual = underTest.getDescription();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetHistory() throws Exception {
		// given
		String value = "history";
		underTest.setHistory(value);
		// when
		String actual = underTest.getHistory();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetHomepage() throws Exception {
		// given
		String value = "homepage";
		underTest.setHomepage(value);
		// when
		String actual = underTest.getHomepage();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetIcon() throws Exception {
		// given
		String value = "icon";
		underTest.setIcon(value);
		// when
		String actual = underTest.getIcon();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetLookAndFeel() throws Exception {
		// given
		String value = "lookAndFeel";
		underTest.setLookAndFeel(value);
		// when
		String actual = underTest.getLookAndFeel();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetMetadata() throws Exception {
		// given
		String value = "metadata";
		underTest.setMetadata(value);
		// when
		String actual = underTest.getMetadata();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetOperations() throws Exception {
		// given
		String value = "operations";
		underTest.setOperations(value);
		// when
		String actual = underTest.getOperations();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPermissions() throws Exception {
		// given
		String value = "permissions";
		underTest.setPermissions(value);
		// when
		String actual = underTest.getPermissions();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetSettings() throws Exception {
		// given
		String value = "settings";
		underTest.setSettings(value);
		// when
		String actual = underTest.getSettings();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTheme() throws Exception {
		// given
		String value = "theme";
		underTest.setTheme(value);
		// when
		String actual = underTest.getTheme();
		// then
		assertEquals(value, actual);
	}

}
