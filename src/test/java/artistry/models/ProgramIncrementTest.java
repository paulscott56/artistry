/** This class was generated by GenTest@Mobacar */
package artistry.models;

import java.util.*;
import java.util.Arrays;
import java.util.Date;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class ProgramIncrementTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private ProgramIncrement underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetDemo() throws Exception {
		// given
		SystemDemo value = new SystemDemo();
		underTest.setDemo(value);
		// when
		SystemDemo actual = underTest.getDemo();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEndDate() throws Exception {
		// given
		Date value = new Date();
		underTest.setEndDate(value);
		// when
		Date actual = underTest.getEndDate();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetInspectAndAdapt() throws Exception {
		// given
		InspectAndAdapt value = new InspectAndAdapt();
		underTest.setInspectAndAdapt(value);
		// when
		InspectAndAdapt actual = underTest.getInspectAndAdapt();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetObjectives() throws Exception {
		// given
		Set<Objective> value = new TreeSet<>();
		underTest.setObjectives(value);
		// when
		Set<Objective> actual = underTest.getObjectives();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetStartDate() throws Exception {
		// given
		Date value = new Date();
		underTest.setStartDate(value);
		// when
		Date actual = underTest.getStartDate();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTeams() throws Exception {
		// given
		Set<ImplementationTeam> value = new TreeSet<>();
		underTest.setTeams(value);
		// when
		Set<ImplementationTeam> actual = underTest.getTeams();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testIsComplete() throws Exception {
		// given
		boolean value = false;
		underTest.setComplete(value);
		// when
		boolean actual = underTest.isComplete();
		// then
		assertEquals(value, actual);
	}

}
