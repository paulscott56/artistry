/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class BoardLocationTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private BoardLocation underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetAvatarURI() throws Exception {
		// given
		String value = "avatarURI";
		underTest.setAvatarURI(value);
		// when
		String actual = underTest.getAvatarURI();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetDisplayName() throws Exception {
		// given
		String value = "displayName";
		underTest.setDisplayName(value);
		// when
		String actual = underTest.getDisplayName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetName() throws Exception {
		// given
		String value = "name";
		underTest.setName(value);
		// when
		String actual = underTest.getName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetProjectId() throws Exception {
		// given
		String value = "projectId";
		underTest.setProjectId(value);
		// when
		String actual = underTest.getProjectId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetProjectKey() throws Exception {
		// given
		String value = "projectKey";
		underTest.setProjectKey(value);
		// when
		String actual = underTest.getProjectKey();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetProjectName() throws Exception {
		// given
		String value = "projectName";
		underTest.setProjectName(value);
		// when
		String actual = underTest.getProjectName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetProjectTypeKey() throws Exception {
		// given
		String value = "projectTypeKey";
		underTest.setProjectTypeKey(value);
		// when
		String actual = underTest.getProjectTypeKey();
		// then
		assertEquals(value, actual);
	}

}
