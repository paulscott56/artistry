/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Set;
import java.util.TreeSet;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class CompanyTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Company underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetCompanyAddress() throws Exception {
		// given
		Address value = new Address();
		underTest.setCompanyAddress(value);
		// when
		Address actual = underTest.getCompanyAddress();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCompanyName() throws Exception {
		// given
		String value = "companyName";
		underTest.setCompanyName(value);
		// when
		String actual = underTest.getCompanyName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetContactPerson() throws Exception {
		// given
		Person value = new Person();
		underTest.setContactPerson(value);
		// when
		Person actual = underTest.getContactPerson();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCountry() throws Exception {
		// given
		Country value = new Country();
		underTest.setCountry(value);
		// when
		Country actual = underTest.getCountry();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEmailAddress() throws Exception {
		// given
		EmailAddress value = new EmailAddress();
		underTest.setEmailAddress(value);
		// when
		EmailAddress actual = underTest.getEmailAddress();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEmployees() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setEmployees(value);
		// when
		Set<Person> actual = underTest.getEmployees();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetLatitude() throws Exception {
		// given
		Double value = 0d;
		underTest.setLatitude(value);
		// when
		Double actual = underTest.getLatitude();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetLongitude() throws Exception {
		// given
		Double value = 0d;
		underTest.setLongitude(value);
		// when
		Double actual = underTest.getLongitude();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPhoneNumber() throws Exception {
		// given
		PhoneNumber value = new PhoneNumber();
		underTest.setPhoneNumber(value);
		// when
		PhoneNumber actual = underTest.getPhoneNumber();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTeams() throws Exception {
		// given
		Set<ImplementationTeam> value = new TreeSet<>();
		underTest.setTeams(value);
		// when
		Set<ImplementationTeam> actual = underTest.getTeams();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

}
