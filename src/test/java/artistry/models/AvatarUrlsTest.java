/** This class was generated by GenTest@Mobacar */
package artistry.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.*;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class AvatarUrlsTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private AvatarUrls underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGet16x16() throws Exception {
		// given
		String value = "_16x16";
		underTest.set16x16(value);
		// when
		String actual = underTest.get16x16();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGet24x24() throws Exception {
		// given
		String value = "_24x24";
		underTest.set24x24(value);
		// when
		String actual = underTest.get24x24();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGet32x32() throws Exception {
		// given
		String value = "_32x32";
		underTest.set32x32(value);
		// when
		String actual = underTest.get32x32();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGet48x48() throws Exception {
		// given
		String value = "_48x48";
		underTest.set48x48(value);
		// when
		String actual = underTest.get48x48();
		// then
		assertEquals(value, actual);
	}

}
