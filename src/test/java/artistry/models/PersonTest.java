/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import java.time.LocalDateTime;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeSet;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;

@RunWith(MockitoJUnitRunner.class)
public class PersonTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Person underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetActive() throws Exception {
		// given
		Boolean value = false;
		underTest.setActive(value);
		// when
		Boolean actual = underTest.getActive();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetAddress() throws Exception {
		// given
		Address value = new Address();
		underTest.setAddress(value);
		// when
		Address actual = underTest.getAddress();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCountry() throws Exception {
		// given
		Country value = new Country();
		underTest.setCountry(value);
		// when
		Country actual = underTest.getCountry();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCountryCode() throws Exception {
		// given
		String value = "countryCode";
		underTest.setCountryCode(value);
		// when
		String actual = underTest.getCountryCode();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetDateCreated() throws Exception {
		// given
		LocalDateTime value = null;
		underTest.setDateCreated(value);
		// when
		LocalDateTime actual = underTest.getDateCreated();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEmailAddress() throws Exception {
		// given
		EmailAddress value = new EmailAddress();
		underTest.setEmailAddress(value);
		// when
		EmailAddress actual = underTest.getEmailAddress();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetJiraUsername() throws Exception {
		// given
		String value = "jiraUsername";
		underTest.setJiraUsername(value);
		// when
		String actual = underTest.getJiraUsername();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetModificationDate() throws Exception {
		// given
		LocalDateTime value = null;
		underTest.setModificationDate(value);
		// when
		LocalDateTime actual = underTest.getModificationDate();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetName() throws Exception {
		// given
		String value = "name";
		underTest.setName(value);
		// when
		String actual = underTest.getName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetNickname() throws Exception {
		// given
		String value = "nickname";
		underTest.setNickname(value);
		// when
		String actual = underTest.getNickname();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPhoneNumber() throws Exception {
		// given
		PhoneNumber value = new PhoneNumber();
		underTest.setPhoneNumber(value);
		// when
		PhoneNumber actual = underTest.getPhoneNumber();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetRoles() throws Exception {
		// given
		Set<PersonRole> value = new TreeSet<>();
		underTest.setRoles(value);
		// when
		Set<PersonRole> actual = underTest.getRoles();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetSurname() throws Exception {
		// given
		String value = "surname";
		underTest.setSurname(value);
		// when
		String actual = underTest.getSurname();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTimezone() throws Exception {
		// given
		TimeZone value = mock(TimeZone.class);
		underTest.setTimezone(value);
		// when
		TimeZone actual = underTest.getTimezone();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetUsername() throws Exception {
		// given
		String value = "username";
		underTest.setUsername(value);
		// when
		String actual = underTest.getUsername();
		// then
		assertEquals(value, actual);
	}

}
