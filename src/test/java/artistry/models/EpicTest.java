/** This class was generated by GenTest@Mobacar */
package artistry.models;

import artistry.enums.EpicType;
import java.math.BigDecimal;
import java.util.*;
import java.util.Arrays;
import java.util.Date;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class EpicTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Epic underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetAdditionalPotentialFeatures() throws Exception {
		// given
		Set<Feature> value = new TreeSet<>();
		underTest.setAdditionalPotentialFeatures(value);
		// when
		Set<Feature> actual = underTest.getAdditionalPotentialFeatures();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetAnalysisSummary() throws Exception {
		// given
		Document value = new Document();
		underTest.setAnalysisSummary(value);
		// when
		Document actual = underTest.getAnalysisSummary();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetAnticipatedBusinessImpact() throws Exception {
		// given
		Document value = new Document();
		underTest.setAnticipatedBusinessImpact(value);
		// when
		Document actual = underTest.getAnticipatedBusinessImpact();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetAttachments() throws Exception {
		// given
		Set<Document> value = new TreeSet<>();
		underTest.setAttachments(value);
		// when
		Set<Document> actual = underTest.getAttachments();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetBusinessOutcomeHypothesis() throws Exception {
		// given
		Document value = new Document();
		underTest.setBusinessOutcomeHypothesis(value);
		// when
		Document actual = underTest.getBusinessOutcomeHypothesis();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCustomers() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setCustomers(value);
		// when
		Set<Person> actual = underTest.getCustomers();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetEpicDescription() throws Exception {
		// given
		String value = "epicDescription";
		underTest.setEpicDescription(value);
		// when
		String actual = underTest.getEpicDescription();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEpicName() throws Exception {
		// given
		String value = "epicName";
		underTest.setEpicName(value);
		// when
		String actual = underTest.getEpicName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEpicOwner() throws Exception {
		// given
		Person value = new Person();
		underTest.setEpicOwner(value);
		// when
		Person actual = underTest.getEpicOwner();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEpicType() throws Exception {
		// given
		EpicType value = EpicType.PROGRAM_EPIC_SPIKE_FIRST;
		underTest.setEpicType(value);
		// when
		EpicType actual = underTest.getEpicType();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEstimatedMonetaryCost() throws Exception {
		// given
		BigDecimal value = BigDecimal.valueOf(0);
		underTest.setEstimatedMonetaryCost(value);
		// when
		BigDecimal actual = underTest.getEstimatedMonetaryCost();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEstimatedStoryPoints() throws Exception {
		// given
		int value = 0;
		underTest.setEstimatedStoryPoints(value);
		// when
		int actual = underTest.getEstimatedStoryPoints();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEstimatedTimeline() throws Exception {
		// given
		DevelopmentTimeLine value = new DevelopmentTimeLine();
		underTest.setEstimatedTimeline(value);
		// when
		DevelopmentTimeLine actual = underTest.getEstimatedTimeline();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetFunnelEntryDate() throws Exception {
		// given
		Date value = new Date();
		underTest.setFunnelEntryDate(value);
		// when
		Date actual = underTest.getFunnelEntryDate();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetHypothesisStatement() throws Exception {
		// given
		String value = "hypothesisStatement";
		underTest.setHypothesisStatement(value);
		// when
		String actual = underTest.getHypothesisStatement();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetImpactOnProductsAndServices() throws Exception {
		// given
		Document value = new Document();
		underTest.setImpactOnProductsAndServices(value);
		// when
		Document actual = underTest.getImpactOnProductsAndServices();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetImpactOnSalesDeployment() throws Exception {
		// given
		Document value = new Document();
		underTest.setImpactOnSalesDeployment(value);
		// when
		Document actual = underTest.getImpactOnSalesDeployment();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetInScope() throws Exception {
		// given
		Set<Requirement> value = new TreeSet<>();
		underTest.setInScope(value);
		// when
		Set<Requirement> actual = underTest.getInScope();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetIncrementalImplementationStrategy() throws Exception {
		// given
		EpicType value = EpicType.PROGRAM_EPIC_SPIKE_FIRST;
		underTest.setIncrementalImplementationStrategy(value);
		// when
		EpicType actual = underTest.getIncrementalImplementationStrategy();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetInhouseOrExternalDev() throws Exception {
		// given
		Document value = new Document();
		underTest.setInhouseOrExternalDev(value);
		// when
		Document actual = underTest.getInhouseOrExternalDev();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetLeadingIndicators() throws Exception {
		// given
		Document value = new Document();
		underTest.setLeadingIndicators(value);
		// when
		Document actual = underTest.getLeadingIndicators();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetMilestones() throws Exception {
		// given
		Document value = new Document();
		underTest.setMilestones(value);
		// when
		Document actual = underTest.getMilestones();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetMvpFeatures() throws Exception {
		// given
		Set<Feature> value = new TreeSet<>();
		underTest.setMvpFeatures(value);
		// when
		Set<Feature> actual = underTest.getMvpFeatures();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetNonFunctionalRequirements() throws Exception {
		// given
		Set<NonFunctionalRequirement> value = new TreeSet<>();
		underTest.setNonFunctionalRequirements(value);
		// when
		Set<NonFunctionalRequirement> actual = underTest.getNonFunctionalRequirements();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetNotesAndComments() throws Exception {
		// given
		Document value = new Document();
		underTest.setNotesAndComments(value);
		// when
		Document actual = underTest.getNotesAndComments();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetOutOfScope() throws Exception {
		// given
		Set<Requirement> value = new TreeSet<>();
		underTest.setOutOfScope(value);
		// when
		Set<Requirement> actual = underTest.getOutOfScope();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetSequencingAndDependencies() throws Exception {
		// given
		Document value = new Document();
		underTest.setSequencingAndDependencies(value);
		// when
		Document actual = underTest.getSequencingAndDependencies();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetSponsors() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setSponsors(value);
		// when
		Set<Person> actual = underTest.getSponsors();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetTypeOfReturn() throws Exception {
		// given
		Document value = new Document();
		underTest.setTypeOfReturn(value);
		// when
		Document actual = underTest.getTypeOfReturn();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetUsersAndMarketsAffecred() throws Exception {
		// given
		Set<String> value = new TreeSet<>();
		underTest.setUsersAndMarketsAffecred(value);
		// when
		Set<String> actual = underTest.getUsersAndMarketsAffecred();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testIsGoNoGo() throws Exception {
		// given
		boolean value = false;
		underTest.setGoNoGo(value);
		// when
		boolean actual = underTest.isGoNoGo();
		// then
		assertEquals(value, actual);
	}

}
