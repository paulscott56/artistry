/** This class was generated by GenTest@Mobacar */
package artistry.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.*;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class ConfluenceSpaceTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private ConfluenceSpace underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetConfluenceId() throws Exception {
		// given
		int value = 0;
		underTest.setConfluenceId(value);
		// when
		int actual = underTest.getConfluenceId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetKey() throws Exception {
		// given
		String value = "key";
		underTest.setKey(value);
		// when
		String actual = underTest.getKey();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetName() throws Exception {
		// given
		String value = "name";
		underTest.setName(value);
		// when
		String actual = underTest.getName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetStatus() throws Exception {
		// given
		String value = "status";
		underTest.setStatus(value);
		// when
		String actual = underTest.getStatus();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetType() throws Exception {
		// given
		String value = "type";
		underTest.setType(value);
		// when
		String actual = underTest.getType();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGet_expandable() throws Exception {
		// given
		ConfluenceExpandable value = new ConfluenceExpandable();
		underTest.set_expandable(value);
		// when
		ConfluenceExpandable actual = underTest.get_expandable();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGet_links() throws Exception {
		// given
		ConfluenceLinks value = new ConfluenceLinks();
		underTest.set_links(value);
		// when
		ConfluenceLinks actual = underTest.get_links();
		// then
		assertEquals(value, actual);
	}

}
