/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class CapabilityTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Capability underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetBenefitHypothesis() throws Exception {
		// given
		Document value = new Document();
		underTest.setBenefitHypothesis(value);
		// when
		Document actual = underTest.getBenefitHypothesis();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCapabilityName() throws Exception {
		// given
		String value = "capabilityName";
		underTest.setCapabilityName(value);
		// when
		String actual = underTest.getCapabilityName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetEnablers() throws Exception {
		// given
		Set<Enabler> value = new TreeSet<>();
		underTest.setEnablers(value);
		// when
		Set<Enabler> actual = underTest.getEnablers();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetFeatures() throws Exception {
		// given
		Set<Feature> value = new TreeSet<>();
		underTest.setFeatures(value);
		// when
		Set<Feature> actual = underTest.getFeatures();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetSolutionBacklog() throws Exception {
		// given
		SolutionBacklog value = new SolutionBacklog();
		underTest.setSolutionBacklog(value);
		// when
		SolutionBacklog actual = underTest.getSolutionBacklog();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTrains() throws Exception {
		// given
		List<Train> value = Arrays.asList();
		underTest.setTrains(value);
		// when
		List<Train> actual = underTest.getTrains();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testIsAccepted() throws Exception {
		// given
		boolean value = false;
		underTest.setAccepted(value);
		// when
		boolean actual = underTest.isAccepted();
		// then
		assertEquals(value, actual);
	}

}
