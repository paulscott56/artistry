/** This class was generated by GenTest@Mobacar */
package artistry.models;

import java.util.*;
import java.util.Arrays;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.SerializationUtils;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.annotation.GeneratedValue;
import org.neo4j.ogm.annotation.Id;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.endsWith;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import utils.*;

@RunWith(MockitoJUnitRunner.class)
public class ProgramTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private Program underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetArchitecturalRunway() throws Exception {
		// given
		Set<Document> value = new TreeSet<>();
		underTest.setArchitecturalRunway(value);
		// when
		Set<Document> actual = underTest.getArchitecturalRunway();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetBusinessOwners() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setBusinessOwners(value);
		// when
		Set<Person> actual = underTest.getBusinessOwners();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetInspectAndAdaptWorkshops() throws Exception {
		// given
		Set<InspectAndAdapt> value = new TreeSet<>();
		underTest.setInspectAndAdaptWorkshops(value);
		// when
		Set<InspectAndAdapt> actual = underTest.getInspectAndAdaptWorkshops();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetKeyCustomers() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setKeyCustomers(value);
		// when
		Set<Person> actual = underTest.getKeyCustomers();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetOtherStakeholders() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setOtherStakeholders(value);
		// when
		Set<Person> actual = underTest.getOtherStakeholders();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetPrincipalRoles() throws Exception {
		// given
		Set<PrincipalRole> value = new TreeSet<>();
		underTest.setPrincipalRoles(value);
		// when
		Set<PrincipalRole> actual = underTest.getPrincipalRoles();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetProductManagement() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setProductManagement(value);
		// when
		Set<Person> actual = underTest.getProductManagement();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetProgramBacklog() throws Exception {
		// given
		ProgramBacklog value = new ProgramBacklog();
		underTest.setProgramBacklog(value);
		// when
		ProgramBacklog actual = underTest.getProgramBacklog();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetProgramEpics() throws Exception {
		// given
		Set<Epic> value = new TreeSet<>();
		underTest.setProgramEpics(value);
		// when
		Set<Epic> actual = underTest.getProgramEpics();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetProgramKanban() throws Exception {
		// given
		ProgramKanban value = new ProgramKanban();
		underTest.setProgramKanban(value);
		// when
		ProgramKanban actual = underTest.getProgramKanban();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetProgramName() throws Exception {
		// given
		String value = "programName";
		underTest.setProgramName(value);
		// when
		String actual = underTest.getProgramName();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetReleaseTrainEngineer() throws Exception {
		// given
		Person value = new Person();
		underTest.setReleaseTrainEngineer(value);
		// when
		Person actual = underTest.getReleaseTrainEngineer();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetSuccessMeasures() throws Exception {
		// given
		Set<String> value = new TreeSet<>();
		underTest.setSuccessMeasures(value);
		// when
		Set<String> actual = underTest.getSuccessMeasures();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetSystemArchitect() throws Exception {
		// given
		Person value = new Person();
		underTest.setSystemArchitect(value);
		// when
		Person actual = underTest.getSystemArchitect();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetSystemDemos() throws Exception {
		// given
		Set<SystemDemo> value = new TreeSet<>();
		underTest.setSystemDemos(value);
		// when
		Set<SystemDemo> actual = underTest.getSystemDemos();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetTrain() throws Exception {
		// given
		Train value = new Train();
		underTest.setTrain(value);
		// when
		Train actual = underTest.getTrain();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetValueStream() throws Exception {
		// given
		ValueStream value = new ValueStream();
		underTest.setValueStream(value);
		// when
		ValueStream actual = underTest.getValueStream();
		// then
		assertEquals(value, actual);
	}

}
