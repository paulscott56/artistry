/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Set;
import java.util.TreeSet;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class DevelopmentValueStreamTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private DevelopmentValueStream underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetBudget() throws Exception {
		// given
		Document value = new Document();
		underTest.setBudget(value);
		// when
		Document actual = underTest.getBudget();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCustomerRelationships() throws Exception {
		// given
		Set<Document> value = new TreeSet<>();
		underTest.setCustomerRelationships(value);
		// when
		Set<Document> actual = underTest.getCustomerRelationships();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetEconomicFramework() throws Exception {
		// given
		Document value = new Document();
		underTest.setEconomicFramework(value);
		// when
		Document actual = underTest.getEconomicFramework();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetPeople() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setPeople(value);
		// when
		Set<Person> actual = underTest.getPeople();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetSolutionArchitect() throws Exception {
		// given
		Person value = new Person();
		underTest.setSolutionArchitect(value);
		// when
		Person actual = underTest.getSolutionArchitect();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetSolutionManagement() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setSolutionManagement(value);
		// when
		Set<Person> actual = underTest.getSolutionManagement();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetSolutionTrainEngineer() throws Exception {
		// given
		Person value = new Person();
		underTest.setSolutionTrainEngineer(value);
		// when
		Person actual = underTest.getSolutionTrainEngineer();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetValueProposition() throws Exception {
		// given
		Document value = new Document();
		underTest.setValueProposition(value);
		// when
		Document actual = underTest.getValueProposition();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetValueStreamName() throws Exception {
		// given
		String value = "valueStreamName";
		underTest.setValueStreamName(value);
		// when
		String actual = underTest.getValueStreamName();
		// then
		assertEquals(value, actual);
	}

}
