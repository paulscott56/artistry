/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.Set;
import java.util.TreeSet;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class ImplementationTeamTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private ImplementationTeam underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetAgileTeam() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setAgileTeam(value);
		// when
		Set<Person> actual = underTest.getAgileTeam();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetBoard() throws Exception {
		// given
		BoardEntry value = new BoardEntry();
		underTest.setBoard(value);
		// when
		BoardEntry actual = underTest.getBoard();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetCompany() throws Exception {
		// given
		Company value = new Company();
		underTest.setCompany(value);
		// when
		Company actual = underTest.getCompany();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetDevTeam() throws Exception {
		// given
		Set<Person> value = new TreeSet<>();
		underTest.setDevTeam(value);
		// when
		Set<Person> actual = underTest.getDevTeam();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetInnovationAndPlanningDocuments() throws Exception {
		// given
		Set<Document> value = new TreeSet<>();
		underTest.setInnovationAndPlanningDocuments(value);
		// when
		Set<Document> actual = underTest.getInnovationAndPlanningDocuments();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetIterationPlanningDocuments() throws Exception {
		// given
		Set<Document> value = new TreeSet<>();
		underTest.setIterationPlanningDocuments(value);
		// when
		Set<Document> actual = underTest.getIterationPlanningDocuments();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetIterationRetrospectives() throws Exception {
		// given
		Set<IterationRetrospective> value = new TreeSet<>();
		underTest.setIterationRetrospectives(value);
		// when
		Set<IterationRetrospective> actual = underTest.getIterationRetrospectives();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetIterationReviews() throws Exception {
		// given
		Set<IterationReview> value = new TreeSet<>();
		underTest.setIterationReviews(value);
		// when
		Set<IterationReview> actual = underTest.getIterationReviews();
		// then
		assertArrayEquals(value.toArray(), actual.toArray());
	}

	@Test
	public void testGetProductOwner() throws Exception {
		// given
		Person value = new Person();
		underTest.setProductOwner(value);
		// when
		Person actual = underTest.getProductOwner();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetScrumMaster() throws Exception {
		// given
		Person value = new Person();
		underTest.setScrumMaster(value);
		// when
		Person actual = underTest.getScrumMaster();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTeamEmail() throws Exception {
		// given
		EmailAddress value = new EmailAddress();
		underTest.setTeamEmail(value);
		// when
		EmailAddress actual = underTest.getTeamEmail();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTeamLogo() throws Exception {
		// given
		String value = "teamLogo";
		underTest.setTeamLogo(value);
		// when
		String actual = underTest.getTeamLogo();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTeamName() throws Exception {
		// given
		String value = "teamName";
		underTest.setTeamName(value);
		// when
		String actual = underTest.getTeamName();
		// then
		assertEquals(value, actual);
	}

}
