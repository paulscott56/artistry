/** This class was generated by GenTest@Mobacar */
package artistry.models;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class JiraWebHookMessageTest {

	/**
	 * If the class has a default constructor, then you don't need to instantiate it manually. InjectMocks annotation will do it.<br/>
	 * Otherwise use the {@link #setupTest()} method for creating the underTest object.
	 */
	@InjectMocks
	private JiraWebHookMessage underTest;

	@Before
	public void setupTest() {
		// prepare test
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testGetChangelog() throws Exception {
		// given
		Changelog value = new Changelog();
		underTest.setChangelog(value);
		// when
		Changelog actual = underTest.getChangelog();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetId() throws Exception {
		// given
		Long value = 0L;
		underTest.setId(value);
		// when
		Long actual = underTest.getId();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetIssue() throws Exception {
		// given
		Issue value = new Issue();
		underTest.setIssue(value);
		// when
		Issue actual = underTest.getIssue();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetIssue_event_type_name() throws Exception {
		// given
		String value = "issue_event_type_name";
		underTest.setIssue_event_type_name(value);
		// when
		String actual = underTest.getIssue_event_type_name();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetTimestamp() throws Exception {
		// given
		Long value = 0L;
		underTest.setTimestamp(value);
		// when
		Long actual = underTest.getTimestamp();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetUser() throws Exception {
		// given
		User value = new User();
		underTest.setUser(value);
		// when
		User actual = underTest.getUser();
		// then
		assertEquals(value, actual);
	}

	@Test
	public void testGetWebhookEvent() throws Exception {
		// given
		String value = "webhookEvent";
		underTest.setWebhookEvent(value);
		// when
		String actual = underTest.getWebhookEvent();
		// then
		assertEquals(value, actual);
	}

}
